require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const dbManager = require('./dbManager'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const token = process.env.TELEGRAM_BOT_TOKEN || '7446240384:AAGXLTi_v6Q3X26eSHcLPhNOTwUNVzBrvMo';
// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });
const ADMIN_ID = 1902147359


//–ê–≤—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç –ë–æ—Ç–∞
// ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
const GROUP_CHAT_ID = '-1002651603862'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if (chatId == GROUP_CHAT_ID) {
        try {
            // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é "üëç" –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.setMessageReaction(chatId, messageId, {
                reaction: ['üëç']
            });
            console.log(`–†–µ–∞–∫—Ü–∏—è "üëç" —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏:", error);
        }
    }
});


// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            ["–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"],
            ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª"],
            ["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã"],
            ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
            ["–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"]
        ],
        resize_keyboard: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        one_time_keyboard: true // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createInlineKeyboard(options, questionId, correctAnswerIndex = null) {
    const keyboard = [];
    for (let i = 0; i < options.length; i++) {
        const callbackData = `answer_${questionId}_${i}`; // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
        let buttonText = options[i];
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
        if (correctAnswerIndex !== null && i === correctAnswerIndex) {
            buttonText += " ‚úÖ"; // –ó–µ–ª—ë–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
        }
        keyboard.push([{ text: buttonText, callback_data: callbackData }]);
    }
    return { reply_markup: { inline_keyboard: keyboard } };
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
// async function updateQuestionMessage(chatId, messageId, questionId, correctAnswerIndex) {
//     try {
//         const questions = await dbManager.getAllQuestions();
//         const question = questions.find(q => q.id === questionId);
//         if (!question) {
//             console.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
//             return;
//         }
//         const totalAnswers = (question.correctAnswersCount || 0) + (question.wrongAnswersCount || 0);
//         const correctPercentage = totalAnswers > 0 ? Math.round((question.correctAnswersCount / totalAnswers) * 100) : 0;

//         const messageText = `${question.question}
// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
// –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: ${totalAnswers} 
// –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–æ: ${question.correctAnswersCount || 0} (${correctPercentage}%)`;
//         // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
//         await bot.editMessageCaption(messageText, {
//             chat_id: chatId,
//             message_id: messageId,
//             reply_markup: createInlineKeyboard(question.options, question.id, correctAnswerIndex).reply_markup
//         });
//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞:", error);
//     }
// }
// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª
async function sendMessageWithKeyboard(chatId, questionId) {
    try {
        const questions = await dbManager.getAllQuestions();
        const question = questions.find(q => q.id === questionId);
        if (!question) {
            console.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            return;
        }
        const totalAnswers = (question.correctAnswersCount || 0) + (question.wrongAnswersCount || 0);
        const correctPercentage = totalAnswers > 0 ? Math.round((question.correctAnswersCount / totalAnswers) * 100) : 0;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const sentMessage = await bot.sendPhoto(chatId, question.image, {
            caption: question.question,
            reply_markup: createInlineKeyboard(question.options, question.id).reply_markup
        });
        console.log("–§–æ—Ç–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ sendMessageWithKeyboard:", error);
    }
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    if (userId === ADMIN_ID) {
        try {
            await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", adminKeyboard);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }

    } else {
        await bot.sendMessage(chatId, "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞", adminKeyboard);
    }

});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    if (data.startsWith('answer_')) {
        const [_, questionId, userAnswerIndex] = data.split('_');
        const userId = callbackQuery.from.id;
        try {
            const questions = await dbManager.getAllQuestions();
            const currentQuestion = questions.find(q => q.id === questionId);
            if (!currentQuestion) {
                console.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
            if (currentQuestion.answeredUsers.includes(userId)) {
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç –±—ã–ª: ‚úÖ${currentQuestion.correctAnswer}`,
                    show_alert: true
                });
                return;
            }
            const userAnswer = currentQuestion.options[parseInt(userAnswerIndex)];
            const isCorrect = userAnswer === currentQuestion.correctAnswer;
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö
            if (isCorrect) {
                await dbManager.addUserToAnsweredUsers(questionId, userId);
                await dbManager.incrementAnswerCount(questionId, true); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentQuestion.explanation}`,
                    show_alert: true
                });

            } else {
                await dbManager.incrementAnswerCount(questionId, false); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë`,
                    show_alert: true
                });
            }


        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error);
        }
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback:", data);
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on('message', async (msg) => {
    const userId = msg.from.id
    if (userId === ADMIN_ID) {
        const chatId = msg.chat.id;
        const text = msg.text;
        if (text === "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
            addNewQuestion(chatId);
        } else if (text === "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª") {
            sendQuestionToChannel(chatId);
        } else if (text === "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã") {
            showAllQuestions(chatId);
        } else if (text === "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å") {
            editQuestion(chatId);
        } else if (text === "–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å") {
            deleteQuestion(chatId);
        }
    } else {
        return
    }
});
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function addNewQuestion(chatId) {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:");
    bot.once('message', async (questionMsg) => {
        const question = questionMsg.text;
        bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:");
        bot.once('photo', async (photoMsg) => {
            const photoFileId = photoMsg.photo[photoMsg.photo.length - 1].file_id; // –ë–µ—Ä–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
            bot.once('message', async (optionsMsg) => {
                const options = optionsMsg.text.split(',').map(option => option.trim());
                bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                bot.once('message', async (correctAnswerMsg) => {
                    const correctAnswer = correctAnswerMsg.text.trim();
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:");
                    bot.once('message', async (explanationMsg) => {
                        const explanation = explanationMsg.text;
                        try {
                            const questionId = await dbManager.addNewQuestion({
                                question,
                                options,
                                correctAnswer,
                                explanation,
                                image: photoFileId,
                                chatId: chatId.toString()
                            });
                            bot.sendMessage(chatId, "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", adminKeyboard);
                        } catch (error) {
                            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
                        }
                    });
                });
            });
        });
    });
};
// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª
async function sendQuestionToChannel(chatId) {
    try {
        const questions = await dbManager.getAllQuestions();
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }
        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n";
        questions.forEach((question, index) => {
            message += `${index + 1}. ${question.question}\n`;
        });
        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const CHANNEL_ID = '-1002651603862'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                await sendMessageWithKeyboard(CHANNEL_ID, selectedQuestion.id);
                bot.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.", adminKeyboard);
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Firestore:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.");
    }
}
// –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function showAllQuestions(chatId) {
    try {
        const questions = await dbManager.getAllQuestions();
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }
        let message = "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n";
        questions.forEach((question, index) => {
            message += `${index + 1}. ${question.question}\n`;
        });
        bot.sendMessage(chatId, message, adminKeyboard);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Firestore:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.");
    }
}
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async function editQuestion(chatId) {
    try {
        const questions = await dbManager.getAllQuestions();
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", adminKeyboard);
            return;
        }
        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
        questions.forEach((question, index) => {
            message += `${index + 1}. ${question.question}\n`;
        });
        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const questionId = selectedQuestion.id;
                bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: "${selectedQuestion.question}". –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`, {
                    reply_markup: {
                        keyboard: [
                            ["–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"],
                            ["–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"],
                            ["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"],
                            ["–û–±—ä—è—Å–Ω–µ–Ω–∏–µ"],
                            ["–û—Ç–º–µ–Ω–∞"]
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
                bot.once('message', async (editMsg) => {
                    const editAction = editMsg.text;
                    if (editAction === "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
                        bot.once('message', async (newQuestionMsg) => {
                            const newQuestionText = newQuestionMsg.text;
                            await dbManager.updateQuestion(questionId, { question: newQuestionText });
                            bot.sendMessage(chatId, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", adminKeyboard);
                        });
                    } else if (editAction === "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                        bot.once('message', async (newOptionsMsg) => {
                            const newOptions = newOptionsMsg.text.split(',').map(option => option.trim());
                            await dbManager.updateQuestion(questionId, { options: newOptions });
                            bot.sendMessage(chatId, "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", adminKeyboard);
                        });
                    } else if (editAction === "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                        bot.once('message', async (newCorrectAnswerMsg) => {
                            const newCorrectAnswer = newCorrectAnswerMsg.text.trim();
                            await dbManager.updateQuestion(questionId, { correctAnswer: newCorrectAnswer });
                            bot.sendMessage(chatId, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", adminKeyboard);
                        });
                    } else if (editAction === "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:");
                        bot.once('message', async (newExplanationMsg) => {
                            const newExplanation = newExplanationMsg.text;
                            await dbManager.updateQuestion(questionId, { explanation: newExplanation });
                            bot.sendMessage(chatId, "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", adminKeyboard);
                        });
                    } else if (editAction === "–û—Ç–º–µ–Ω–∞") {
                        bot.sendMessage(chatId, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", adminKeyboard);
                    } else {
                        bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", adminKeyboard);
                    }
                });
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
}
// –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async function deleteQuestion(chatId) {
    try {
        const questions = await dbManager.getAllQuestions();
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", adminKeyboard);
            return;
        }

        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
        questions.forEach((question, index) => {
            message += `${index + 1}. ${question.question}\n`;
        });

        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const questionId = selectedQuestion.id;
                await dbManager.deleteQuestion(questionId);
                bot.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", adminKeyboard);
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
}