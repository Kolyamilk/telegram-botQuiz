const TelegramBot = require('node-telegram-bot-api');
const { v4: uuidv4 } = require('uuid'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const token = '7446240384:AAGXLTi_v6Q3X26eSHcLPhNOTwUNVzBrvMo';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Firestore
const db = require('./firebase.config'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Firestore

// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            ["–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"],
            ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª"],
            ["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã"],
            ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å"],
            ["–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"]
        ],
        resize_keyboard: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        one_time_keyboard: false // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createInlineKeyboard(options, questionId) {
    const keyboard = [];
    for (let i = 0; i < options.length; i++) {
        const callbackData = `answer_${questionId}_${i}`; // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
        keyboard.push([{ text: options[i], callback_data: callbackData }]);
    }
    return { reply_markup: { inline_keyboard: keyboard } };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
async function sendMessageWithKeyboard(chatId, questionId) {
    try {
        const questionRef = db.collection('questions').doc(questionId); // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–æ–ø—Ä–æ—Å
        const questionDoc = await questionRef.get();
        if (!questionDoc.exists) {
            console.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            return;
        }

        const question = questionDoc.data();
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.sendPhoto(chatId, question.image, {
            caption: question.question,
            reply_markup: createInlineKeyboard(question.options, question.id).reply_markup // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        })
        .then(() => {
            console.log("–§–æ—Ç–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.");
        })
        .catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤:", error);
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ sendMessageWithKeyboard:", error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", adminKeyboard);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
        addNewQuestion(chatId);
    } else if (text === "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª") {
        sendQuestionToChannel(chatId);
    } else if (text === "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã") {
        showAllQuestions(chatId);
    } else if (text === "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å") {
        editQuestion(chatId);
    } else if (text === "–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å") {
        deleteQuestion(chatId);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async function addNewQuestion(chatId) {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:");
    bot.once('message', (questionMsg) => {
        const question = questionMsg.text + '\n\n–°—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é\nüëç - —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å\nüëé - –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è';
        bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:");
        bot.once('photo', async (photoMsg) => {
            const photoFileId = photoMsg.photo[photoMsg.photo.length - 1].file_id; // –ë–µ—Ä–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
            bot.once('message', (optionsMsg) => {
                const options = optionsMsg.text.split(',').map(option => option.trim());
                bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                bot.once('message', (correctAnswerMsg) => {
                    const correctAnswer = correctAnswerMsg.text.trim();
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:");
                    bot.once('message', async (explanationMsg) => {
                        const explanation = explanationMsg.text;
                        const uniqueId = uuidv4(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Firestore
                        const questionData = {
                            id: uniqueId,
                            question,
                            options,
                            correctAnswer,
                            explanation,
                            image: photoFileId,
                            chatId: chatId.toString() // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —á–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
                        };

                        try {
                            await db.collection('questions').doc(uniqueId).set(questionData);
                            bot.sendMessage(chatId, "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", adminKeyboard);
                        } catch (error) {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ Firestore:", error);
                            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
                        }
                    });
                });
            });
        });
    });
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;

    if (data.startsWith('answer_')) {
        const [_, questionId, userAnswerIndex] = data.split('_'); // –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        try {
            const questionRef = db.collection('questions').doc(questionId); // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–æ–ø—Ä–æ—Å
            const questionDoc = await questionRef.get();
            if (!questionDoc.exists) {
                console.error("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                return;
            }

            const currentQuestion = questionDoc.data();
            const userAnswer = currentQuestion.options[parseInt(userAnswerIndex)];

            if (userAnswer === currentQuestion.correctAnswer) {
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentQuestion.explanation}`,
                    show_alert: true
                });
                await bot.sendMessage(userId, `${currentQuestion.explanation}`);
            } else {
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë`,
                    show_alert: true
                });
                await bot.sendMessage(userId, `–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correctAnswer}. ${currentQuestion.explanation}`);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error);
        }
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback:", data);
    }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª
async function sendQuestionToChannel(chatId) {
    try {
        const questionsSnapshot = await db.collection('questions').get();
        if (questionsSnapshot.empty) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }

        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n";
        const questions = [];
        questionsSnapshot.forEach(doc => {
            questions.push({ id: doc.id, ...doc.data() });
            message += `${questions.length}. ${doc.data().question}\n`;
        });

        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const CHANNEL_ID = '-1002651603862'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                await sendMessageWithKeyboard(CHANNEL_ID, selectedQuestion.id);
                bot.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.", adminKeyboard);
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Firestore:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function showAllQuestions(chatId) {
    try {
        const questionsSnapshot = await db.collection('questions').get();
        if (questionsSnapshot.empty) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }

        let message = "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n";
        questionsSnapshot.forEach((doc, index) => {
            const question = doc.data();
            message += `${index + 1}. ${question.question}\n`;
        });

        bot.sendMessage(chatId, message, adminKeyboard);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Firestore:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async function editQuestion(chatId) {
    try {
        const questionsSnapshot = await db.collection('questions').get();
        if (questionsSnapshot.empty) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", adminKeyboard);
            return;
        }

        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
        const questions = [];
        questionsSnapshot.forEach(doc => {
            questions.push({ id: doc.id, ...doc.data() });
            message += `${questions.length}. ${doc.data().question}\n`;
        });

        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const questionId = selectedQuestion.id;

                bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: "${selectedQuestion.question}". –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`, {
                    reply_markup: {
                        keyboard: [
                            ["–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"],
                            ["–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"],
                            ["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"],
                            ["–û–±—ä—è—Å–Ω–µ–Ω–∏–µ"],
                            ["–û—Ç–º–µ–Ω–∞"]
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });

                bot.once('message', async (editMsg) => {
                    const editAction = editMsg.text;

                    if (editAction === "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
                        bot.once('message', async (newQuestionMsg) => {
                            const newQuestionText = newQuestionMsg.text;
                            await db.collection('questions').doc(questionId).update({ question: newQuestionText });
                            bot.sendMessage(chatId, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", adminKeyboard);
                        });
                    } else if (editAction === "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                        bot.once('message', async (newOptionsMsg) => {
                            const newOptions = newOptionsMsg.text.split(',').map(option => option.trim());
                            await db.collection('questions').doc(questionId).update({ options: newOptions });
                            bot.sendMessage(chatId, "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", adminKeyboard);
                        });
                    } else if (editAction === "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                        bot.once('message', async (newCorrectAnswerMsg) => {
                            const newCorrectAnswer = newCorrectAnswerMsg.text.trim();
                            await db.collection('questions').doc(questionId).update({ correctAnswer: newCorrectAnswer });
                            bot.sendMessage(chatId, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", adminKeyboard);
                        });
                    } else if (editAction === "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ") {
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:");
                        bot.once('message', async (newExplanationMsg) => {
                            const newExplanation = newExplanationMsg.text;
                            await db.collection('questions').doc(questionId).update({ explanation: newExplanation });
                            bot.sendMessage(chatId, "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", adminKeyboard);
                        });
                    } else if (editAction === "–û—Ç–º–µ–Ω–∞") {
                        bot.sendMessage(chatId, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", adminKeyboard);
                    } else {
                        bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", adminKeyboard);
                    }
                });
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async function deleteQuestion(chatId) {
    try {
        const questionsSnapshot = await db.collection('questions').get();
        if (questionsSnapshot.empty) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", adminKeyboard);
            return;
        }

        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
        const questions = [];
        questionsSnapshot.forEach(doc => {
            questions.push({ id: doc.id, ...doc.data() });
            message += `${questions.length}. ${doc.data().question}\n`;
        });

        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", adminKeyboard);
        bot.once('message', async (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const selectedQuestion = questions[index];
                const questionId = selectedQuestion.id;

                await db.collection('questions').doc(questionId).delete();
                bot.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", adminKeyboard);
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.");
    }
}