const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const token = '7446240384:AAGXLTi_v6Q3X26eSHcLPhNOTwUNVzBrvMo';
const bot = new TelegramBot(token);

// –°–æ–∑–¥–∞–µ–º Express-—Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(express.json());

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
const QUESTIONS_FILE = 'questions.json';
let questions = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
if (fs.existsSync(QUESTIONS_FILE)) {
    const data = fs.readFileSync(QUESTIONS_FILE, 'utf8');
    questions = JSON.parse(data);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª
function saveQuestions() {
    fs.writeFileSync(QUESTIONS_FILE, JSON.stringify(questions, null, 2), 'utf8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createInlineKeyboard(options, questionId) {
    const keyboard = [];
    for (let i = 0; i < options.length; i++) {
        const callbackData = `answer_${questionId}_${i}`;
        keyboard.push([{ text: options[i], callback_data: callbackData }]);
    }
    return { reply_markup: { inline_keyboard: keyboard } };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
function sendMessageWithKeyboard(chatId, questionIndex) {
    const question = questions[questionIndex];
    bot.sendPhoto(chatId, question.image, {
        caption: question.question,
        reply_markup: createInlineKeyboard(question.options, question.id).reply_markup
    })
    .then(() => {
        console.log("Photo and options sent successfully");
    })
    .catch((error) => {
        console.error("Error sending photo or options:", error);
    });
}

// –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
const adminKeyboard = {
    reply_markup: {
        keyboard: [
            ["–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"],
            ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª"],
            ["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã"]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", adminKeyboard);
    } catch (error) {
        console.error("Error sending start message:", error);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /add_question –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
bot.onText(/\/add_question/, async (msg) => {
    const chatId = msg.chat.id;

    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:");
    bot.once('message', (questionMsg) => {
        const question = questionMsg.text + '\n\n–°—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é\n üëç- —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å\nüëé- –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è';

        bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:");
        bot.once('photo', async (photoMsg) => {
            const photoFileId = photoMsg.photo[photoMsg.photo.length - 1].file_id;
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
            bot.once('message', (optionsMsg) => {
                const options = optionsMsg.text.split(',').map(option => option.trim());
                bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                bot.once('message', (correctAnswerMsg) => {
                    const correctAnswer = correctAnswerMsg.text.trim();
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:");
                    bot.once('message', (explanationMsg) => {
                        const explanation = explanationMsg.text;
                        const uniqueId = uuidv4();
                        questions.push({
                            id: uniqueId,
                            question,
                            options,
                            correctAnswer,
                            explanation,
                            image: photoFileId,
                            chatId
                        });
                        saveQuestions();
                        bot.sendMessage(chatId, "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", adminKeyboard);
                    });
                });
            });
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:");
        bot.once('message', (questionMsg) => {
            const question = questionMsg.text + '\n\n–°—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é\n üëç- —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å\nüëé- –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è';

            bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:");
            bot.once('photo', async (photoMsg) => {
                const photoFileId = photoMsg.photo[photoMsg.photo.length - 1].file_id;
                bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
                bot.once('message', (optionsMsg) => {
                    const options = optionsMsg.text.split(',').map(option => option.trim());
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
                    bot.once('message', (correctAnswerMsg) => {
                        const correctAnswer = correctAnswerMsg.text.trim();
                        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:");
                        bot.once('message', (explanationMsg) => {
                            const explanation = explanationMsg.text;
                            const uniqueId = uuidv4();
                            questions.push({
                                id: uniqueId,
                                question,
                                options,
                                correctAnswer,
                                explanation,
                                image: photoFileId,
                                chatId
                            });
                            saveQuestions();
                            bot.sendMessage(chatId, "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", adminKeyboard);
                        });
                    });
                });
            });
        });
    } else if (text === "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª") {
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }
        let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n";
        questions.forEach((q, index) => {
            message += `${index + 1}. ${q.question}\n`;
        });
        bot.sendMessage(chatId, message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", adminKeyboard);
        bot.once('message', (indexMsg) => {
            const index = parseInt(indexMsg.text) - 1;
            if (index >= 0 && index < questions.length) {
                const CHANNEL_ID = '-1002651603862';
                sendMessageWithKeyboard(CHANNEL_ID, index);
                bot.sendMessage(chatId, "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.", adminKeyboard);
            } else {
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.", adminKeyboard);
            }
        });
    } else if (text === "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã") {
        if (questions.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", adminKeyboard);
            return;
        }
        let message = "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n";
        questions.forEach((q, index) => {
            message += `${index + 1}. ${q.question}\n`;
        });
        bot.sendMessage(chatId, message, adminKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;
    if (data.startsWith('answer_')) {
        const [_, questionId, userAnswerIndex] = data.split('_');
        const currentQuestion = questions.find(q => q.id === questionId);
        if (!currentQuestion) {
            console.error("No question found for ID:", questionId);
            return;
        }
        const userAnswer = currentQuestion.options[parseInt(userAnswerIndex)];
        try {
            if (userAnswer === currentQuestion.correctAnswer) {
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentQuestion.explanation}`,
                    show_alert: true
                });
                await bot.sendMessage(userId, `${currentQuestion.explanation}`);
            } else {
                await bot.answerCallbackQuery({
                    callback_query_id: callbackQuery.id,
                    text: `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë`,
                    show_alert: true
                });
                await bot.sendMessage(userId, `–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correctAnswer}. ${currentQuestion.explanation}`);
            }
        } catch (error) {
            console.error("Error handling callback query:", error);
        }
    } else {
        console.error("Unknown callback data:", data);
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
const WEBHOOK_URL = 'https://telegram-bot-QuickQuizChannel.onrender.com/'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Render URL
bot.setWebhook(WEBHOOK_URL);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.post('/webhook', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫ –ø–æ—Ä—Ç—É
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});